<?php

namespace App\Controller;

use App\Entity\Admin\Rent;
use App\Entity\Araba;
use App\Entity\User;
use App\Form\Admin\RentType;
use App\Form\UserType;
use App\Repository\Admin\RentRepository;
use App\Repository\ArabaRepository;
use App\Repository\UserRepository;
use PhpParser\Node\Scalar\MagicConst\File;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Validator\Constraints\Date;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
use Symfony\Component\Routing\Annotation\Route;

/**
 * @Route("/user")
 */
class UserController extends AbstractController
{
    /**
     * @Route("/", name="user_index", methods={"GET"})
     */
    public function index(): Response
    {
        return $this->render('user/show.html.twig');
    }





    /**
     * @Route("/new", name="user_new", methods={"GET","POST"})
     */
    public function new(Request $request, UserPasswordEncoderInterface $passwordEncoder): Response
    {
        $user = new User();
        $form = $this->createForm(UserType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager = $this->getDoctrine()->getManager();

            $file=$form['image']->getData();
            if($file)
            {
                $fileName=$this->generateUniqueFileName() .'.' . $file->guessExtension();
                try{
                    $file->move(
                        $this->getParameter('images_directory'),
                        $fileName
                    );
                }catch(FileException $e) {

                }
                $user->setImage($fileName);
            }

            //<<<<<<<<<<<<file upload>>>>>>>>>////

            // encode the plain password
            $user->setPassword(
                $passwordEncoder->encodePassword(
                    $user,
                    $form->get('plainPassword')->getData()
                )
            );

            $entityManager->persist($user);
            $entityManager->flush();

            return $this->redirectToRoute('user_index');
        }

        return $this->render('user/new.html.twig', [
            'user' => $user,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="user_show", methods={"GET"},requirements={"id"="\d+"})
     */
    public function show(User $user): Response
    {
        return $this->render('user/show.html.twig', [
            'user' => $user,
        ]);
    }

    /**
     * @Route("/{id}/edit", name="user_edit", methods={"GET","POST"})
     */
    public function edit(Request $request, User $user, UserPasswordEncoderInterface $passwordEncoder): Response
    {
        $user=$this->getUser();
        if($user->getId()!='ROLE_ADMIN') {
            echo "wrong user";
        }

        $form = $this->createForm(UserType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $file=$form['image']->getData();
            if($file)
            {
                $fileName=$this->generateUniqueFileName() .'.' . $file->guessExtension();
                try{
                    $file->move(
                        $this->getParameter('images_directory'),
                        $fileName
                    );
                }catch(FileException $e) {

                }
                $user->setImage($fileName);
            }

            // encode the plain password
            $user->setPassword(
                $passwordEncoder->encodePassword(
                    $user,
                    $form->get('password')->getData()
                )
            );
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('user_index');
        }

        return $this->render('user/edit.html.twig', [
            'user' => $user,
            'form' => $form->createView(),
        ]);
    }
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/{id}", name="user_delete", methods={"DELETE"})
     */
    public function delete(Request $request, User $user): Response
    {
        if ($this->isCsrfTokenValid('delete'.$user->getId(), $request->request->get('_token'))) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->remove($user);
            $entityManager->flush();
        }

        return $this->redirectToRoute('user_index');
    }


    
    /**
     * @Route("/rent", name="user_rent", methods={"GET"})
     */
    public function rents(RentRepository $rentRepository): Response
    {
        $user = $this->getUser();
        $rents = $rentRepository->getUserRent($user->getId());

        return $this->render('user/rents.html.twig', [
            'rents' => $rents,
        ]);
    }

       /**
     * @Route("/show/rent/{id}", name="user_rent_show", methods={"GET"})
     */
    public function rentshow($id,RentRepository $rentRepository): Response
    {

        $rents = $rentRepository->getRent($id);
        return $this->render('user/rent_show.html.twig', [
            'rents' => $rents,
        ]);
    }

     /**
     * @Route("/rent/{cid}", name="user_rent_new", methods={"GET","POST"})
     */
    public function newRent(Request $request, $cid, ArabaRepository $arabaRepository): Response
    {
        $day = $_REQUEST["day"];
        $rentin = $_REQUEST["rentin"];
        $rentout = Date("Y-m-d H:i:s",strtotime($rentin."$day Day")); //Adding days to date
        $rentin = Date("Y-m-d H:i:s",strtotime($rentin."0 Day"));

        $car = $arabaRepository->findOneBy(['id' => $cid]);
        $total = $day * $car->getPrice();



        $rent = new Rent();
        $form = $this->createForm(RentType::class, $rent);
        $form->handleRequest($request);
        $submittedToken = $request->request->get('token');

        if ($form->isSubmitted()) {
            if ($this->isCsrfTokenValid('form-rent', $submittedToken)) {
                $entityManager = $this->getDoctrine()->getManager();

                $rentin = date_create_from_format("Y-m-d H:i:s",$rentin); //Convert to datetime format
                $rentout = date_create_from_format("Y-m-d H:i:s",$rentout); //Convert to datetime format
                $rent->setRentin($rentin);
                $rent->setRentout($rentout);
                $rent->setStatus('New');
                $rent->setIp($_SERVER['REMOTE_ADDR']);
                $rent->setCarid($cid);

                $user = $this->getUser();  //Get login user data
                $rent->setUserid($user->getId());
                $rent->setDay($day);
                $rent->setTotalprice($total);
                $rent->setPrice($car->getPrice());
                $rent->setCreatedAt(new \Datetime()); //Get now date time


                $entityManager->persist($rent);
                $entityManager->flush();

                return $this->redirectToRoute('user_rent');
            }
        }

        return $this->render('user/newrent.html.twig', [
            'rent' => $rent,
            'car' => $car,
            'total' => $total,
            'day' => $day,
            'rentin' => $rentin,
            'rentout' => $rentout,
            'form' => $form->createView(),
        ]);
    }
}
